# SPDX-License-Identifier: GPL-2.0-or-later
#

# Source the ESP common configuration file.
source [find target/esp_common.cfg]

# Target specific global variables
set _CHIPNAME 					"esp32p4"
set _CHIP_HP_NAME   			$_CHIPNAME.hp
set _CHIP_LP_NAME   			$_CHIPNAME.lp
set _CPUTAPID 					0x0012c25
set _ESP_ARCH					"riscv"
set _ONLYCPU					1
set _ESP_SMP_TARGET				0
set _ESP_SMP_BREAK 				0
set _ESP_EFUSE_MAC_ADDR_REG  	0x5012D044

#TODO Flash stub is not ready to use yet.
set _FLASH_SIZE 0

#TODO FreeRTOS is not supported yet
set _RTOS "hwthread"

proc esp32p4_wdt_disable { } {
	global _RISCV_DMCONTROL _RISCV_SB_CS _RISCV_SB_ADDR0 _RISCV_SB_DATA0

	# Disable TG0 watchdog
	riscv dmi_write $_RISCV_DMCONTROL 		0x80000001
	riscv dmi_write $_RISCV_SB_CS 			0x40000
	riscv dmi_write $_RISCV_SB_ADDR0 		0x500c2064
	riscv dmi_write $_RISCV_SB_DATA0		0x50D83AA1

	riscv dmi_write $_RISCV_DMCONTROL 		0x80000001
	riscv dmi_write $_RISCV_SB_CS 			0x40000
	riscv dmi_write $_RISCV_SB_ADDR0 		0x500c2048
	riscv dmi_write $_RISCV_SB_DATA0		0

	# Disable TG1 watchdog
	riscv dmi_write $_RISCV_DMCONTROL 		0x80000001
	riscv dmi_write $_RISCV_SB_CS 			0x40000
	riscv dmi_write $_RISCV_SB_ADDR0 		0x500c3064
	riscv dmi_write $_RISCV_SB_DATA0		0x50D83AA1

	riscv dmi_write $_RISCV_DMCONTROL 		0x80000001
	riscv dmi_write $_RISCV_SB_CS 			0x40000
	riscv dmi_write $_RISCV_SB_ADDR0 		0x500c3048
	riscv dmi_write $_RISCV_SB_DATA0		0
}

proc esp32p4_soc_reset { } {
	global _RISCV_DMCONTROL _RISCV_SB_CS _RISCV_SB_ADDR0 _RISCV_SB_DATA0

    riscv dmi_write $_RISCV_DMCONTROL 		0x80000001
    riscv dmi_write $_RISCV_SB_CS 			0x40000
    riscv dmi_write $_RISCV_SB_ADDR0 		0x50110008
    riscv dmi_write $_RISCV_SB_DATA0		0x00000002

    # Wait for the reset to happen
    sleep 10
    poll

    esp32p4_wdt_disable

    # Here debugger reads anyhalted and allhalted bits as set (0x3a2)
    # We will clean allhalted state by resuming the core.
    riscv dmi_write $_RISCV_DMCONTROL 	0x40000001

    # Put the hart back into reset state. Note that we need to keep haltreq set.
    riscv dmi_write $_RISCV_DMCONTROL 	0x80000003
}

proc esp32p4_memprot_is_enabled { } {
	#TODO
	return 0
}

proc set_esp32p4_variables { } {
	global _CHIPNAME _CHIP_LP_NAME _CHIP_HP_NAME
	global _CPUNAME_0 _TARGETNAME_0 _TAPNAME_0
	global _ESP_WDT_DISABLE _ESP_SOC_RESET _ESP_MEMPROT_IS_ENABLED

	# There are 2 jtag taps with daisy chain connection. tap0 connected to lp core, tap1 connected to dual hp core
	# For now we support only hp core debugging. OCD-772 for the LP Core debugging on C6 and P4
	set _CPUNAME_0					cpu
	set _TARGETNAME_0 				$_CHIP_HP_NAME.$_CPUNAME_0
	set _TAPNAME_0 					$_CHIP_HP_NAME.$_CPUNAME_0

	set _ESP_WDT_DISABLE 			"${_CHIPNAME}_wdt_disable"
	set _ESP_SOC_RESET 				"${_CHIPNAME}_soc_reset"
	set _ESP_MEMPROT_IS_ENABLED 	"${_CHIPNAME}_memprot_is_enabled"
}

proc create_esp32p4_jtag { } {
	global _CHIP_LP_NAME _CHIP_HP_NAME _CPUNAME_0 _CPUTAPID
	jtag newtap $_CHIP_LP_NAME $_CPUNAME_0 -irlen 5 -expected-id $_CPUTAPID
	jtag newtap $_CHIP_HP_NAME $_CPUNAME_0 -irlen 5 -expected-id $_CPUTAPID
}

proc create_esp32p4_openocd_targets  { } {
	global _TARGETNAME_0 _CHIPNAME _TAPNAME_0 _RTOS

	target create $_TARGETNAME_0 $_CHIPNAME -chain-position $_TAPNAME_0 -coreid 0 -rtos $_RTOS
}

proc configure_esp32p4_event_halted { } {
	global _TARGETNAME_0

	$_TARGETNAME_0 configure -event halted {
		global _ESP_WDT_DISABLE
	    $_ESP_WDT_DISABLE
	}
}

proc create_esp32p4_target { } {
	set_esp32p4_variables
	create_esp32p4_jtag
	create_esp32p4_openocd_targets
	#Â OpenOCD events
	configure_esp32p4_event_halted
	configure_event_examine_end
	configure_event_reset_assert_post

	configure_esp_riscv_default_settings
}

create_esp32p4_target
